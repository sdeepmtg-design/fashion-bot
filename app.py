import os
import logging
import time
from telegram.ext import Application, CommandHandler
import feedparser
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Docker
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler()  # –î–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å Docker
    ]
)

logger = logging.getLogger(__name__)

class ArticleFetcher:
    def __init__(self):
        self.rss_feeds = [
            'https://www.vogue.com/feed/rss',
            'https://www.harpersbazaar.com/feed/rss', 
            'https://www.elle.com/feed/rss',
            'https://www.gq.com/feed/rss'
        ]
    
    def fetch_articles(self, num_articles=2):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –æ –º–æ–¥–µ"""
        articles = []
        
        for feed_url in self.rss_feeds:
            try:
                logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∏–∑: {feed_url}")
                feed = feedparser.parse(feed_url)
                
                for entry in feed.entries[:3]:
                    article = {
                        'title': entry.title,
                        'link': entry.link,
                        'summary': self._clean_summary(getattr(entry, 'summary', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')),
                        'source': getattr(feed.feed, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
                    }
                    articles.append(article)
                    
                    if len(articles) >= num_articles:
                        return articles
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {feed_url}: {e}")
        
        return articles[:num_articles]
    
    def _clean_summary(self, summary):
        """–û—á–∏—â–∞–µ—Ç HTML –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
        try:
            soup = BeautifulSoup(summary, 'html.parser')
            text = soup.get_text()
            return text[:300] + "..." if len(text) > 300 else text
        except:
            return summary[:300] + "..." if len(summary) > 300 else summary

async def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üëó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fashion Bot!

–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ –º–∏—Ä–∞ –º–æ–¥—ã!

–ö–æ–º–∞–Ω–¥—ã:
/latest - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—å–∏ –æ –º–æ–¥–µ
/help - –ü–æ–º–æ—â—å
    """
    await update.message.reply_text(welcome_text)

async def latest(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /latest - –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—å–∏"""
    await update.message.reply_text("üîÑ –ò—â—É —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—å–∏ –æ –º–æ–¥–µ...")
    
    fetcher = ArticleFetcher()
    articles = fetcher.fetch_articles(2)
    
    if not articles:
        await update.message.reply_text("‚ùå –°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    for article in articles:
        try:
            message_text = f"""
üëó **{article['title']}**

üìñ {article['summary']}

üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {article['source']}
üîó [–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é]({article['link']})

#–º–æ–¥–∞ #—Å—Ç–∏–ª—å
            """
            
            await update.message.reply_text(
                message_text,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            await update.message.reply_text(f"üì∞ {article['title']}\nüîó {article['link']}")

async def help(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ Fashion Bot - –ü–æ–º–æ—â—å

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/latest - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—å–∏ –æ –º–æ–¥–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
    """
    await update.message.reply_text(help_text)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ environment variables
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        logger.error("üí° –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ Environment Variables –Ω–∞ Render")
        return
    
    logger.info("‚úÖ TELEGRAM_BOT_TOKEN –Ω–∞–π–¥–µ–Ω")
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Fashion Bot...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
        app = Application.builder().token(token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("latest", latest)) 
        app.add_handler(CommandHandler("help", help))
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info("üì± –ù–∞–ø–∏—à–∏—Ç–µ /start –≤–∞—à–µ–º—É –±–æ—Ç—É –≤ Telegram")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        app.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º

if __name__ == "__main__":
    main()
